/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { HennosConsumer } from "../singletons/base";
import { Tool } from "ollama";
import { Logger } from "../singletons/logger";
import { Config } from "../singletons/config";
import { BaseTool, ToolCallFunctionArgs, ToolCallMetadata } from "./BaseTool";

export class OpenWeatherMapLookupTool extends BaseTool {
    public static isEnabled(): boolean {
        if (Config.OPEN_WEATHER_API) {
            return true;
        }

        return false;
    }

    public static definition(): Tool {
        return {
            type: "function",
            function: {
                name: "open_weather_map_lookup",
                description: [
                    "Use the Open Weathermap API to get a weather report for a specific location.",
                    "This tool requires the latitude and longitude of the location to be provided as parameters.",
                    "This tool returns information such as temp, feels_like, temp_min, temp_max, pressure, humidity, and wind_speed, along with a brief description of the weather, such as 'clear sky', 'few clouds', etc."
                ].join(" "),
                parameters: {
                    type: "object",
                    properties: {
                        mode: {
                            type: "string",
                            description: "The mode of the tool. This can be 'current' or 'forecast'. By default, 'current' mode is used.",
                        },
                        lat: {
                            type: "number",
                            description: "The location latitude.",
                        },
                        lon: {
                            type: "number",
                            description: "The location longitude.",
                        },
                        units: {
                            type: "string",
                            description: "Units of measurement to return. 'standard', 'metric' and 'imperial' units are available. If you do not use the units parameter, 'standard' units will be applied by default.",
                        }
                    },
                    required: ["lat", "lon"],
                }
            }
        };
    }

    public static async callback(req: HennosConsumer, args: ToolCallFunctionArgs, metadata: ToolCallMetadata): Promise<[string, ToolCallMetadata]> {
        if (!args.lat) {
            return ["open_weather_map_lookup error, lat not provided", metadata];
        }

        if (!args.lon) {
            return ["open_weather_map_lookup error, lon not provided", metadata];
        }

        const units = args.units ?? "standard";
        const mode = args.mode ?? "current";

        Logger.info(req, "open_weathermap_lookup_tool_callback", { lat: args.lat, lon: args.lon, units: units, mode: mode });
        try {
            if (mode === "current") {
                const url = `https://api.openweathermap.org/data/2.5/weather?lat=${args.lat}&lon=${args.lon}&units=${units}&appid=${Config.OPEN_WEATHER_API}`;
                const weather = await BaseTool.fetchJSONData(url);
                return [`Here is the weather report generated by the Open Weathermap API for the location lat=${args.lat} lon=${args.lon} using ${units} units: ${JSON.stringify(weather)}`, metadata];
            }

            if (mode === "forecast") {
                const url = `https://api.openweathermap.org/data/2.5/forecast?lat=${args.lat}&lon=${args.lon}&units=${units}&appid=${Config.OPEN_WEATHER_API}`;
                const weather = await BaseTool.fetchJSONData(url);
                return [`Here is the weather forecast generated by the Open Weathermap API for the location lat=${args.lat} lon=${args.lon} using ${units} units: ${JSON.stringify(weather)}`, metadata];
            }

            Logger.warn(req, "open_weathermap_lookup_tool_callback unknown mode", { lat: args.lat, lon: args.lon, units: units, mode: mode });
            return [`open_weather_map_lookup error, unknown mode '${mode}' was specified`, metadata];
        } catch (err) {
            Logger.error(req, "open_weathermap_lookup_tool_callback error", { lat: args.lat, lon: args.lon, error: err });
            return [`open_weather_map_lookup error, unable to fetch weather data for lat=${args.lat} lon=${args.lon}`, metadata];
        }
    }
}
