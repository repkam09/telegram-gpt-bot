import { Logger } from "../singletons/logger";
import { HennosConsumer } from "../singletons/base";
import { Tool } from "ollama";
import { BaseTool, ToolCallFunctionArgs, ToolCallMetadata, ToolCallResponse } from "./BaseTool";
import { Config } from "../singletons/config";

export class PythonSandbox extends BaseTool {
    public static isEnabled(): boolean {
        return Config.TERRARIUM_ENABLED;
    }

    public static definition(): Tool {
        return {
            type: "function",
            function: {
                name: "python_sandbox",
                description: [
                    "This tool will execute Python code in a sandboxed environment. The following Python packages are available: numpy, pandas, sympy, beautifulsoup4, matplotlib, python-sat, scikit-learn, scipy",
                    "This tool is useful for basic calculations, simple data processing, string manipulation, counting the number of characters in a string, and other similar lightweight tasks.",
                    "This tool will return the stdout and stderr that were generated by the Python code. Any files that are created by the Python code will be returned as base64 encoded strings.",
                    "This sandbox environment does not have any internet access and cannot be used to access external resources.",
                ].join(" "),
                parameters: {
                    type: "object",
                    properties: {
                        source: {
                            type: "string",
                            description: "The Python code to execute in the sandboxed environment."
                        }
                    },
                    required: ["source"]
                }
            }
        };
    }

    public static async callback(req: HennosConsumer, args: ToolCallFunctionArgs, metadata: ToolCallMetadata): Promise<ToolCallResponse> {
        Logger.info(req, "PythonSandbox callback", { source: args.source });
        try {
            const result = await BaseTool.postJSONData<PythonSandboxResult>(`http://${Config.TERRARIUM_HOST}:${Config.TERRARIUM_PORT}/`, {
                code: args.source
            });

            Logger.debug(req, `PythonSandbox, results: ${JSON.stringify(result)}`);
            return [`PythonSandbox: ${JSON.stringify(result)}`, metadata];
        } catch (err: unknown) {
            Logger.error(req, `PythonSandbox error: ${err}`);
            const error = err as Error;
            return [`PythonSandbox unable to execute. Error: ${error.message}`, metadata];
        }
    }
}


type PythonSandboxResult = {
    "success": boolean,
    "output_files": { "filename": string, "b64_data": string }[],
    "std_out": string,
    "std_err": string,
    "code_runtime": number
}